window.repositoryObject = {"parameters_custom_fields":[],"object_id":"p268","name":"usp_GetLeadFlag","subtype":"PROCEDURE","is_user_defined":false,"description":null,"summary":[{"field":"Documentation","value":{"_type":"link","name":"LoadMatching@UDVLPLL4DATASRV.linklogi.com","id":"d9"}},{"field":"Schema","value":"dbo"},{"field":"Name","value":"usp_GetLeadFlag"},{"field":"Type","value":"Procedure"}],"script":"CREATE PROCEDURE [dbo].[usp_GetLeadFlag] \r\nAS\r\n--WITH \r\n--NATIVE_COMPILATION, SCHEMABINDING\r\n--AS BEGIN ATOMIC WITH\r\n--(\r\n-- TRANSACTION ISOLATION LEVEL = SNAPSHOT , LANGUAGE = N'us_english'\r\n--)\r\n--------------------------------------------------------------------------\r\n--PROCEDURE NAME : usp_GetLeadFlag\r\n--------------------------------------------------------------------------\r\n--DESCRIPTION :   This routine will return 4 types (2 Link/2 DDAT) of pending lead indicator by CustCd  since the last call\r\n--\r\n--                Ex. If the Customer TESTQA1 had Link Equipment Lead and DAT Load Lead, the record will look like this.\r\n--                          CustCD      EquipmentLead   LoadLead    DATEquipmentLead    DATLoadLead\r\n--                          TESTQA1                 1          0                   0              1\r\n--\r\n--CALLED BY :     Notification Process\r\n--\r\n--EXECUTION FREQUENCY : Default is every 1 minutes.\r\n--PARAMETERS:\r\n--    INPUT:     None\r\n--    OUTPUT:    None\r\n--\r\n--STATUS RETURN: NONE\r\n--EXAMPLE:\r\n--------------------------------------------------------------------------\r\n--REMARKS:\r\n--------------------------------------------------------------------------\r\n--HISTORY: \r\n--AUTHOR\t\tDATE\t\tDESCRIPTION\r\n--Hiro\t\t\t2018.09.18\tInitial Release\r\n--Vevian\t\t2020.08.21\tLLSIM-4566: Bug fix - Old/Initial leads (Primary leads = Lead Type P) should not be considered Live Leads\r\n--\t\t\t\t\t\t\t\t\t\tand should not be returned from this SP. Added condition to check for LeadType = 'S' which means Secondary/Live leads\r\n--Vevian\t\t2020.08.21\tLLSIM-4558: Bug fix - Users hear the Live Lead sound from companies which they have previously excluded\r\n--Vevian\t\t2021.05.13\tLL4RW-325:\tNew logic added to be used for properly bolding all postings with live leads\r\n--Vevian\t\t2021.05.13\tLL4RW-356:\tonly leads with Lead type 'S' (Secondary for live leads)\r\n--Vevian\t\t2021.05.21\tLL4RW-301:\tWhen a user is excluded this should not be included in live leads notifications\r\n--Vevian\t\t2021.05.28\tLL4RW-388:\tAdd postings with DAT live leads to tables LoadsWLiveLeads & EquipmentWLiveLeads tables (for bolding functionality to work)\r\n--------------------------------------------------------------------------\r\n\r\nDECLARE @LastCheckTime datetime\r\n      , @CurrentTime   datetime\r\n      , @FinishedTime  datetime\r\n      , @AppID         varchar(50) = 'LoadMatching'\r\n\r\nDECLARE @LastEquipmentLeadID\t\tINT = 0\r\n      , @LastLoadLeadID\t\t\t\tINT = 0\r\n      , @LastDATEquipmentLeadID\t\tINT = 0\r\n      , @LastDATLoadLeadID\t\t\tINT = 0\r\n\t  , @LiveDATEquipmentLeadLastID INT = 0\r\n      , @LiveDATLoadLeadLastID      INT = 0\r\n\r\n\r\nSET @CurrentTime = GETUTCDATE()\r\n\r\nSELECT @LastCheckTime            = LastCheck \r\n    , @LastEquipmentLeadID       = EquipmentLeadID\r\n    , @LastLoadLeadID            = LoadLeadID\r\n    , @LastDATEquipmentLeadID    = DATEquipmentLeadID\r\n    , @LastDATLoadLeadID         = DATLoadLeadID\r\nFROM dbo.LeadLastCheck \r\nWHERE AppID = @AppID\r\n\r\nIF (@@ROWCOUNT = 0)\r\nBEGIN\r\n    INSERT INTO dbo.LeadLastCheck (AppID) VALUES (@AppID)\r\nEND\r\n\r\n-- Inline tables to avoid complicated subqueries which would slow the logic down\r\n-- Extended EquipmentLead\r\n---- + Do not send notification for Excluded members' leads\r\nDECLARE @EquipWLead AS TABLE (CustCD NVARCHAR(10), EToken INT)\r\n\r\nINSERT INTO @EquipWLead\r\nSELECT\te.CustCD, e.EToken FROM dbo.EquipmentLead e INNER JOIN dbo.LoadPosting l ON (e.LToken = l.Token)     \r\nWHERE\te.ID > @LastEquipmentLeadID AND e.LeadType = 'S'\t\t\r\n\t\tAND\r\n\t\t(NOT EXISTS ( SELECT 1 FROM Exclude x WITH(NOLOCK) \r\n\t\t\t\tWHERE x.CustCd = l.CustCD AND x.ExcludeCustCd = e.CustCD))\r\n\t\tAND \r\n\t\t(NOT EXISTS ( SELECT 1 FROM Exclude x WITH(NOLOCK) \r\n\t\t\t\tWHERE x.CustCd = e.CustCD AND x.ExcludeCustCd = l.CustCD))\t\t\r\nGROUP BY e.CustCD, e.EToken\r\n\r\n-- Extended LoadLead\r\n---- + Do not send notification for Excluded members' leads\r\nDECLARE @LoadWLead AS TABLE (CustCD NVARCHAR(10), LToken INT)\r\n\r\nINSERT INTO @LoadWLead\r\nSELECT\tl.CustCD, l.LToken FROM dbo.LoadLead l INNER JOIN dbo.EquipmentPosting e ON (e.Token = l.EToken)           \r\nWHERE\tl.ID > @LastLoadLeadID AND l.LeadType = 'S' \r\n\t\tAND\r\n\t\t(NOT EXISTS ( SELECT 1 FROM Exclude x WITH(NOLOCK) \r\n\t\t\t\t\t\tWHERE x.CustCd = e.CustCD AND x.ExcludeCustCd = l.CustCD)) \r\n\t\tAND \r\n\t\t(NOT EXISTS ( SELECT 1 FROM Exclude x WITH(NOLOCK) \r\n\t\t\t\t\t\tWHERE x.CustCd = l.CustCD AND x.ExcludeCustCd = e.CustCD))      \r\nGROUP BY l.CustCD, l.LToken\r\n\r\n\r\nSELECT\t\r\n\t\tDISTINCT A.CustCD\r\n\t\t, CASE WHEN (EL.CustCD IS NULL) THEN 0 ELSE 1 END EquipmentLead\r\n\t\t, CASE WHEN (LL.CustCD IS NULL) THEN 0 ELSE 1 END LoadLead\r\n\t\t, CASE WHEN (ED.CustCD IS NULL) THEN 0 ELSE 1 END DATEquipmentLead\r\n\t\t, CASE WHEN (LD.CustCD IS NULL) THEN 0 ELSE 1 END DATLoadLead\r\n\t\t--, @CurrentTime CurrentTime\r\n\t\t, CONVERT(varchar, @CurrentTime, 20) CurrentTime\t-- [YYYY-MM-DD HH:MM:SS]\r\nFROM\t\r\n\t\tdbo.AccountInMem A\r\n\t\tLEFT JOIN @EquipWLead\tEL\tON A.CustCD = EL.CustCD\r\n\t\tLEFT JOIN @LoadWLead\tLL\tON A.CustCD = LL.CustCD\r\n\t\tLEFT JOIN (SELECT CustCD FROM dbo.DATEquipmentLead  WHERE ID > @LastDATEquipmentLeadID  AND LeadType = 'S'\tGROUP BY CustCD) ED ON A.CustCD = ED.CustCD\r\n\t\tLEFT JOIN (SELECT CustCD FROM dbo.DATLoadLead       WHERE ID > @LastDATLoadLeadID  AND LeadType = 'S'\t    GROUP BY CustCD) LD ON A.CustCD = LD.CustCD\r\nWHERE\t\r\n\t\tEL.CustCD IS NOT NULL \r\n\t\tOR LL.CustCD IS NOT NULL\r\n\t\tOR ED.CustCD IS NOT NULL\r\n\t\tOR LD.CustCD IS NOT NULL\r\n\r\nSET @LiveDATEquipmentLeadLastID = @LastDATEquipmentLeadID\r\nSET @LiveDATLoadLeadLastID      = @LastDATLoadLeadID\r\n\r\n-- Get the Last ID  \r\nSELECT @LastEquipmentLeadID     = ISNULL(MAX(ID), 0) FROM dbo.EquipmentLead  \r\nSELECT @LastLoadLeadID          = ISNULL(MAX(ID), 0) FROM dbo.LoadLead  \r\nSELECT @LastDATEquipmentLeadID  = ISNULL(MAX(ID), 0) FROM dbo.DATEquipmentLead  \r\nSELECT @LastDATLoadLeadID       = ISNULL(MAX(ID), 0) FROM dbo.DATLoadLead  \r\n\r\nIF @@ERROR = 0 \r\n\tBEGIN\r\n\t\tUPDATE dbo.LeadLastCheck  \r\n\t\t\tSET LastCheck\t\t\t\t= @CurrentTime\r\n\t\t\t   , EquipmentLeadID        = @LastEquipmentLeadID\r\n\t\t\t   , LoadLeadID             = @LastLoadLeadID\r\n\t\t\t   , DATEquipmentLeadID     = @LastDATEquipmentLeadID\r\n\t\t\t   , DATLoadLeadID          = @LastDATLoadLeadID\r\n\t\tWHERE AppID = @AppID\r\n\r\n\t\t-- populate Loads with LiveLeads table for current LiveLead time\r\n\t\tINSERT INTO LoadsWLiveLeads(CustCD, Token, LiveLeadTime)\r\n\t\t\tSELECT CustCD, LToken, @CurrentTime FROM @LoadWLead \r\n\t\tINSERT INTO LoadsWLiveLeads(CustCD, Token, LiveLeadTime)\r\n\t\t\t(SELECT CustCD, LToken, @CurrentTime FROM dbo.DATLoadLead  WHERE ID > @LiveDATLoadLeadLastID  AND LeadType = 'S'\tGROUP BY CustCD, LToken)\r\n\t\t-- populate Equipment with LiveLeads table for current LiveLead time\r\n\t\tINSERT INTO EquipmentWLiveLeads(CustCD, Token, LiveLeadTime)\r\n\t\t\tSELECT CustCD, EToken, @CurrentTime FROM @EquipWLead\r\n\t\tINSERT INTO EquipmentWLiveLeads(CustCD, Token, LiveLeadTime)\r\n\t\t\t(SELECT CustCD, EToken, @CurrentTime FROM dbo.DATEquipmentLead  WHERE ID > @LiveDATEquipmentLeadLastID  AND LeadType = 'S'\tGROUP BY CustCD, EToken)\r\n\tEND","parameters":[],"dependencies":null,"imported_at":"2021-07-29 12:59"};