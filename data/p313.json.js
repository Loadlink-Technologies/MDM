window.repositoryObject = {"parameters_custom_fields":[],"object_id":"p313","name":"usp_RepostAll","subtype":"PROCEDURE","is_user_defined":false,"description":null,"summary":[{"field":"Documentation","value":{"_type":"link","name":"LoadMatching@UDVLPLL4DATASRV.linklogi.com","id":"d9"}},{"field":"Schema","value":"dbo"},{"field":"Name","value":"usp_RepostAll"},{"field":"Type","value":"Procedure"}],"script":"CREATE PROCEDURE [dbo].[usp_RepostAll]\r\n@CustCd VARCHAR(10),\r\n@UserId INT = 0\r\n--------------------------------------------------------------------------\r\n-- PROCEDURE NAME : [usp_RepostAll]\r\n--------------------------------------------------------------------------\r\n-- DESCRIPTION    : Repost all expired postings\r\n--\r\n-- CALLED BY      : LoadMtaching Web API \r\n-- EXECUTION FREQUENCY : \r\n-- \r\n-- INPUT PARAMS   : @CustCd - CustCd that owns the token\r\n--                 \r\n-- OUTPUT PARAMS  :\r\n-- STATUS RETURN  : \r\n--------------------------------------------------------------------------\r\n-- =======================================================================\r\n-- HISTORY :\r\n-- AUTHOR    DATE       DESCRIPTION\r\n-- Nesrin   2020.02.11\t Initial Development\r\n--                       LLSIM-3942: Create new sp to handle re-post all \r\n-- Nesrin   2020.04.14   LLSIM-4061: Script current Loadmatching DB \r\n--                       and create a new one with no memory optimized tables\r\n-- ======================================================================\r\nAS\r\n\r\n\t-- SET NOCOUNT ON added to prevent extra result sets from\r\n\t-- interfering with SELECT statements.\r\n\t--SET NOCOUNT ON;\r\n\t\r\nDECLARE\r\n @LToken INT=0, @EToken INT=0, @GlobalExcluded BIT,\r\n @RepostStatus bit  -- 1 for success, 0 for failure\r\n --==========================================================================================================================\r\n---- declare two tables to get the records that will be reposted from EquipementPosting and LoadPosting\r\n\r\n DECLARE @EquipmentPostingRecord AS TABLE \r\n\t\t( token INT, CustCd VARCHAR(10), DateAvail DATE, SrceID INT ,SrceCity VARCHAR(50),SrceSt VARCHAR(2),SrceCountry INT,SrceLong FLOAT, \r\n\t\t  SrceLat FLOAT, SrceRadius INT, DestID INT,DestCity VARCHAR(50),DestSt VARCHAR(2),DestCountry INT,DestLong FLOAT,\r\n\t\t  DestLat FLOAT, DestRadius INT,Comment VARCHAR(4096),\r\n\t\t  PostMode CHAR(1),ClientRefNum VARCHAR(256), ProductName VARCHAR(25), CreatedBy INT,\r\n\t\t  CreatedOn DATETIME2(7),DeletedBy INT,DeletedOn DATETIME2(7), VType INT, PStatus CHAR(1),NetworkId INT,Corridor CHAR(1), \r\n\t\t  VSize BIGINT, PAttrib BIGINT, OriginalToken INT, CustomerTracking BIT)\r\n\r\nDECLARE @LoadPostingRecord AS TABLE\r\n\t\t(token INT, CustCd VARCHAR(10), DateAvail DATE, SrceID INT ,SrceCity VARCHAR(50),SrceSt VARCHAR(2),SrceCountry INT,SrceLong FLOAT, \r\n\t\t SrceLat FLOAT, SrceRadius INT, DestID INT,DestCity VARCHAR(50),DestSt VARCHAR(2),DestCountry INT,DestLong FLOAT, DestLat FLOAT,\r\n\t\t DestRadius INT, Comment VARCHAR(4096),PostMode char(1),ClientRefNum VARCHAR(256),\r\n \t\t  ProductName VARCHAR(25), CreatedBy INT,CreatedOn DATETIME2(7),DeletedBy INT,DeletedOn DATETIME2(7),\r\n\t\t  VType INT, PStatus CHAR(1),NetworkId INT, VSize BIGINT, PAttrib BIGINT, OriginalToken INT)\r\n--==========================================================================================================================\r\n ----declare Tables and use them when executing the delete postings SP to prevent their output(Status) to get returned with the call\r\n-- DECLARE @DeleteEquipmentPosting TABLE (RowsCount INT)\r\n --DECLARE @DeleteLoadPosting TABLE (RowsCount INT)\r\n --==========================================================================================================================\r\n --- declare the variables needed to execute the procedures to create new postings for both the load and equipement\r\n DECLARE\r\n\t\t@EDateAvail DATE, @ESrceID INT,@ESrceCity VARCHAR(50),@ESrceSt VARCHAR(2),@ESrceLong FLOAT, @ESrceLat FLOAT, @ESrceRadius INT,@EDestID INT,@EDestCity VARCHAR(50),\r\n\t\t@EDestSt VARCHAR(2),@EDestLong FLOAT, @EDestLat FLOAT, @EDestRadius INT,@EVSize BIGINT,\t@EVType INT,@EComment VARCHAR(4096),@EPostMode CHAR(1),\r\n\t\t@EClientRefNum VARCHAR(256),@EProductName VARCHAR(25),@EPAttrib BIGINT,\t@ECreatedBy INT,@ENetworkId INT,@ECorridor CHAR(1),\t@EOriginalToken INT, @ECustomerTracking BIT,\r\n\r\n\t\t @LDateAvail DATE, @LSrceID INT, @LSrceCity VARCHAR(50), @LSrceSt VARCHAR(2), @LSrceLong FLOAT, @LSrceLat FLOAT, @LSrceRadius INT, @LDestID INT,@LDestCity VARCHAR(50),\r\n\t\t @LDestSt VARCHAR(2), @LDestLong FLOAT, @LDestLat FLOAT,@LDestRadius INT, @LVSize BIGINT, @LVType int,@LComment VARCHAR(4096), @LPostMode char(1),\r\n\t\t @LClientRefNum VARCHAR(256),@LProductName VARCHAR(25), @LPAttrib BIGINT, @LCreatedBy INT, @LNetworkId INT, @LOriginalToken INT\r\n\t\t\r\n--==========================================================================================================================\r\nBEGIN TRANSACTION TransRepostAll\r\n\tBEGIN TRY\r\n\r\n-- Execute SP to get the GlobalExcluded value for this CustCd\r\n\tEXEC @GlobalExcluded = [usp_GetGlobalExcluded] @CustCd\t\t\r\n--===================================================================================================================\r\n\r\n---- execute the SP to get all the postings list for this CustCd\r\n -- Loads\r\n\t INSERT INTO @LoadPostingRecord\r\n\t SELECT\r\n        l.Token ,\r\n        l.CustCD ,\r\n        l.DateAvail ,        \r\n        l.SrceID ,\r\n        l.SrceCity ,\r\n        l.SrceSt ,\r\n        l.SrceCountry ,\r\n        l.SrceLong ,\r\n        l.SrceLat ,\r\n        l.SrceRadius ,\r\n        l.DestID ,\r\n        l.DestCity ,\r\n        l.DestSt ,\r\n        l.DestCountry ,\r\n        l.DestLong ,\r\n        l.DestLat ,\r\n        l.DestRadius ,\r\n        l.Comment ,\r\n        l.PostMode ,\r\n        l.ClientRefNum ,\r\n        l.ProductName ,\r\n        l.CreatedBy ,\r\n        l.CreatedOn ,\r\n        l.DeletedBy ,\r\n        l.DeletedOn ,  \r\n        l.VType ,\r\n        l.PStatus ,\r\n        l.NetworkID ,\r\n\t\tl.VSize,\r\n\t\tl.PAttrib,\r\n\t\tl.OriginalToken\r\n\r\n    FROM dbo.LoadPosting l\tWITH (NOLOCK)\r\n    WHERE CustCd = @CustCd\r\n    AND PStatus = 'E'\r\n    AND DeletedOn IS NULL\r\n    AND l.OriginalToken = 0 \r\n\t\t\t\r\n -- Equipment\r\n\t\r\n\t INSERT INTO @EquipmentPostingRecord \t\t\t\r\n\t\tSELECT\r\n        e.Token ,\r\n        e.CustCD ,\r\n        e.DateAvail ,\r\n\r\n        e.SrceID ,\r\n        e.SrceCity ,\r\n        e.SrceSt ,\r\n        e.SrceCountry ,\r\n        e.SrceLong ,\r\n        e.SrceLat ,\r\n        e.SrceRadius ,\r\n        \r\n        e.DestID ,\r\n        e.DestCity ,\r\n        e.DestSt ,\r\n        e.DestCountry ,\r\n        e.DestLong ,\r\n        e.DestLat ,\r\n        e.DestRadius ,\r\n        e.Comment ,\r\n        e.PostMode ,\r\n        e.ClientRefNum ,\r\n        e.ProductName ,\r\n        e.CreatedBy ,\r\n        e.CreatedOn ,\r\n        e.DeletedBy ,\r\n        e.DeletedOn ,\r\n        e.VType ,\r\n        e.PStatus ,\r\n        e.NetworkId ,       \r\n        e.Corridor ,\r\n\t\te.VSize,\r\n\t\te.PAttrib,\r\n\t\te.OriginalToken,\r\n\t\te.CustomerTracking\t\t\r\n    FROM dbo.EquipmentPosting e WITH (NOLOCK)\r\n    WHERE CustCd = @CustCd\r\n\tAND PStatus = 'E' \r\n    AND DeletedOn IS NULL\r\n    AND e.OriginalToken = 0\r\n\r\n\r\n--===================================================================================================================\t\t\r\n---- Get the values of the expired load postings and assign them to variables to pass it again to the [usp_CreateLoadPosting] SP\t\r\n\tIF EXISTS(SELECT 1 FROM @LoadPostingRecord)\r\n\t   BEGIN\r\n\t     -- Delete the Old expired record (Soft delete)\t\t\r\n\t\t\t UPDATE dbo.LoadPosting \r\n\t\t\t\t\t\tSET    DeletedOn = GETUTCDATE()\r\n\t\t\t\t\t\t\t   ,DeletedBy = @UserId\r\n\t\t\t\t\t\tWHERE  CustCD = @CustCD\r\n\t\t\t\t\t\tAND    DeletedOn IS NULL\r\n\t\t\t\t\t\tAND    PStatus = 'E'\r\n\r\n\t\t\tDECLARE cursor_Loads CURSOR  FAST_FORWARD \r\n\t\t\t        FOR SELECT token FROM @LoadPostingRecord;\r\n\r\n\t\t\tOPEN cursor_Loads;\r\n\t\t\tFETCH NEXT FROM cursor_Loads INTO @LToken;\r\n\t\t\tWHILE @@FETCH_STATUS = 0\r\n\t\t\t\t  BEGIN\r\n\t\t\t\t\t -- get the value of each expired load posting\r\n\t\t\t\t\t SELECT @LDateAvail = CONVERT(DATE,GETDATE(),112), @LSrceID = SrceID, @LSrceCity=SrceCity,@LSrceSt= SrceSt,@LSrceLong =SrceLong,@LSrceLat=SrceLat,@LSrceRadius= SrceRadius,\r\n\t\t\t\t\t\t\t@LDestID =DestID,@LDestCity=DestCity,@LDestSt=DestSt,@LDestLong=DestLong, @LDestLat=DestLat,@LDestRadius =DestRadius,\r\n\t\t\t\t\t\t\t@LVSize=VSize,@LVType=VType,@LComment=Comment,@LPostMode=PostMode,@LClientRefNum=ClientRefNum,@LProductName = ProductName,\r\n\t\t\t\t\t\t\t@LPAttrib=PAttrib,@LCreatedBy = CreatedBy,@LNetworkId = NetworkId, @LOriginalToken = OriginalToken\r\n\t\t\t\t\t  FROM @LoadPostingRecord\tWHERE token = @LToken\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t \r\n\t\t\t\t\t \r\n\t\t\t\t\t--  INSERT INTO @DeleteLoadPosting\r\n\t\t\t\t\t\t--     EXEC [LoadMatching].[dbo].[usp_DeleteLoadPosting] @CustCd,@LCreatedBy, @LToken\r\n\r\n\t\t\t\t\t   -- Create the new posting\r\n\t\t\t\t\t   EXEC [LoadMatching].[dbo].[usp_CreateLoad] @CustCd = @CustCd, @DateAvail = @LDateAvail, @SrceID= @LSrceID,@SrceCity = @LSrceCity,\r\n\t\t\t\t\t        @SrceSt = @LSrceSt,@SrceLong = @LSrceLong, @SrceLat = @LSrceLat , @SrceRadius = @LSrceRadius,@DestID = @LDestID, @DestCity = @LDestCity,\r\n\t\t\t\t\t\t    @DestSt = @LDestSt, @DestLong = @LDestLong,@DestLat = @LDestLat,@DestRadius = @LDestRadius,@VSize = @LVSize,@VType = @LVType,\r\n\t\t\t\t\t\t    @Comment  = @LComment, @PostMode = @LPostMode, @ClientRefNum = @LClientRefNum,@ProductName = @LProductName,@PAttrib = @LPAttrib,\r\n\t\t\t\t\t\t    @CreatedBy = @LCreatedBy, @NetworkId = @LNetworkId, @OriginalToken = @LOriginalToken, @GlobalExcluded = @GlobalExcluded\r\n\t\t\t\t\t\t\t \t\t\t\t \r\n\t\t\t\t\t   FETCH NEXT FROM cursor_Loads INTO @LToken;\r\n\t\t\t\t\tEND;\r\n\t\t\tCLOSE cursor_Loads;\r\n\t\t\tDEALLOCATE cursor_Loads;\t\t\t\t\r\n\t\tEND\r\n\t\t\t\t\t\t\t\t\r\n--===================================================================================================================\r\n---- Get the values of the expired equipment postings and assign them to variables to pass it again to the [usp_CreateEquipmentPosting] SP\t\r\n     IF EXISTS(SELECT 1 FROM @EquipmentPostingRecord)\r\n\t\tBEGIN\r\n\t\t\t -- Delete the Old expired record (Soft delete)\t\r\n\t\t\tUPDATE dbo.EquipmentPosting\r\n\t\t\tSET    DeletedOn = GETUTCDATE()\r\n\t\t\t       ,DeletedBy = @UserId\r\n\t\t\t\t   ,PStatus = 'W' -- Withdraw [As (D)elete and (R)emove characters are not available as used for (D)elivered and On(R)oute]\r\n\t\t\t\t\tWHERE  CustCD = @CustCD\r\n\t\t\t\t\tAND    DeletedOn IS NULL\r\n\t\t\t\t\tAND    PSTATUS = 'E'\r\n\r\n\r\n\t\t\tDECLARE cursor_Equip CURSOR FAST_FORWARD\r\n\t\t\t\t\tFOR SELECT token FROM @EquipmentPostingRecord;\r\n\r\n\t\t\tOPEN cursor_Equip;\r\n\t\t\tFETCH NEXT FROM cursor_Equip INTO @EToken;\r\n\r\n\t\t\tWHILE @@FETCH_STATUS = 0\r\n\t\t\t\t  BEGIN\t\r\n\t\t\t\t     -- Get the values of each expired equipment posting \r\n\t\t\t\t\t SELECT @EDateAvail = CONVERT(DATE,GETDATE(),112), @ESrceID = SrceID, @ESrceCity=SrceCity,@ESrceSt= SrceSt,@ESrceLong =SrceLong,@ESrceLat=SrceLat,@ESrceRadius= SrceRadius,\r\n\t\t\t\t\t        @EDestID =DestID,@EDestCity=DestCity,@EDestSt=DestSt,@EDestLong=DestLong, @EDestLat=DestLat,@EDestRadius =DestRadius,\r\n\t\t\t\t\t        @EVSize=VSize,@EVType=VType,@EComment=Comment,@EPostMode=PostMode,@EClientRefNum=ClientRefNum,@EProductName = ProductName,\r\n\t\t\t\t\t        @EPAttrib=PAttrib,@ECreatedBy = CreatedBy,@ENetworkId = NetworkId,@ECorridor= Corridor, @EOriginalToken = OriginalToken, @ECustomerTracking = CustomerTracking\r\n\t\t\t\t\t FROM @EquipmentPostingRecord WHERE token= @EToken\r\n\t\t\t\t\t\r\n\t\t\t\t\r\n\r\n\t\t\t\t\t-- INSERT INTO @DeleteEquipmentPosting \r\n\t\t\t\t\t--\t\tEXEC [LoadMatching].[dbo].[usp_DeleteEquipmentPosting] @CustCd,@ECreatedBy, @EToken\r\n\r\n\r\n\t\t\t\t\tEXEC  [LoadMatching].[dbo].[usp_CreateEquipment] @CustCD = @CustCd,@DateAvail= @EDateAvail,@SrceID = @ESrceID,@SrceCity = @ESrceCity,@SrceSt = @ESrceSt ,@SrceLong = @ESrceLong,\r\n\t\t\t\t\t\t  @SrceLat = @ESrceLat , @SrceRadius = @ESrceRadius,@DestID = @EDestID,@DestCity = @EDestCity ,@DestSt = @EDestSt,@DestLong = @EDestLong,@DestLat = @EDestLat,@DestRadius = @EDestRadius, @VSize = @EVSize,\r\n\t\t\t\t\t\t  @VType = @EVType,@Comment = @EComment, @PostMode= @EPostMode,@ClientRefNum = @EClientRefNum, @ProductName = @EProductName,@PAttrib = @EPAttrib, @CreatedBy = @ECreatedBy,@NetworkId =@ENetworkId,\r\n\t\t\t\t\t\t  @Corridor = @ECorridor,@OriginalToken = @EOriginalToken, @CustomerTracking = @ECustomerTracking, @GlobalExcluded = @GlobalExcluded\r\n\t\t\t\r\n\t\t\t\t\tFETCH NEXT FROM cursor_Equip INTO @EToken;\r\n\t\t\t    END;\r\n\t\t\tCLOSE cursor_Equip;\r\n\t\t\tDEALLOCATE cursor_Equip;\t\t\r\n\r\n\tEND\r\n\t\r\n--ROLLBACK TRANSACTION TransRepostAll\r\n\r\n\tCOMMIT transaction TransRepostAll\r\n\r\n\tSET @RepostStatus = 1 \r\n\tRETURN @RepostStatus\r\n END TRY\r\nBEGIN CATCH\r\n\r\n\t\tSET @RepostStatus = 0\r\n\r\n\t\tselect ERROR_NUMBER() AS ErrorNumber,\r\n         ERROR_MESSAGE() AS ErrorMessage\r\n\t\tROLLBACK TRANSACTION TransRepostAll\r\n\t\tRETURN @RepostStatus\r\n\r\nEND catch","parameters":[{"name":"CustCd","description":null,"mode":"IN","data_type":"varchar(10)","custom_fields":{}},{"name":"UserId","description":null,"mode":"IN","data_type":"int","custom_fields":{}}],"dependencies":null,"imported_at":"2021-07-29 12:59"};