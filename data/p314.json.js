window.repositoryObject = {"parameters_custom_fields":[],"object_id":"p314","name":"usp_UnAssignment","subtype":"PROCEDURE","is_user_defined":false,"description":null,"summary":[{"field":"Documentation","value":{"_type":"link","name":"LoadMatching@UDVLPLL4DATASRV.linklogi.com","id":"d9"}},{"field":"Schema","value":"dbo"},{"field":"Name","value":"usp_UnAssignment"},{"field":"Type","value":"Procedure"}],"script":"CREATE PROCEDURE [dbo].[usp_UnAssignment]\r\n@Token int,\r\n@UserId int,\r\n@CustCd varchar(10),\r\n@Type char \r\n--------------------------------------------------------------------------\r\n-- PROCEDURE NAME : [usp_UnAssignment]\r\n--------------------------------------------------------------------------\r\n-- DESCRIPTION    : Unassign Load and Equipments from the AssignLoad table and delete the postings records then repost again with the \r\n--\t\t\t\t\tnew date. Sof delete is used for all tables\r\n--\r\n-- CALLED BY      : LoadLinkWeb4 Web API \r\n-- EXECUTION FREQUENCY : \r\n-- \r\n-- INPUT PARAMS   : @UserId - User performing a delete\r\n--                  @Token  - Load or Equipment to be deleted. \r\n--\t\t\t\t\t@CustCd - CustCd that owns the token\r\n--\t\t\t\t\t@Type - B for Broker and C for Carrier\r\n--                 \r\n-- OUTPUT PARAMS  :\r\n-- STATUS RETURN  : \r\n--------------------------------------------------------------------------\r\n-- =============================================\r\n-- HISTORY :\r\n-- AUTHOR    DATE       DESCRIPTION\r\n-- Nesrin   2018.12.20\t Initial Development\r\n-- Nesrin\t2019.01.03\t LLSIM-2044: return the DriverID with the DeleteAssignedLoad table\r\n-- Nesrin\t2019.01.18\t LLSIM-2157: Modify unassigned API to handle empty equipment posting\r\n--\t\t\t\t\t\t Broker should be able to un-assign even if the equipment posting is deleted after the load has been assigned.\r\n-- Vevian\t2019.02.13\t LLSIM-2245: changes made in the call of usp_CreateLoad & usp_CreateEquipment stored procedures to accomodate L to P process\r\n-- Nesrin   2019.08.13   LLSIM-3178: As load matching user - when date of availability is in the future , date availability is reverted to today's when the load is unassigned.\r\n-- Nesrin   2019.11.20   LLSIM-3644: Update the Unassignment sp to save the value of the customer tracking\r\n-- Nesrin   2020.03.09   LLSIM-4010: Update Unassignment SP to match changes to leads count\r\n-- =============================================\r\nAS\r\nBEGIN try\r\n\t-- SET NOCOUNT ON added to prevent extra result sets from\r\n\t-- interfering with SELECT statements.\r\n\t--SET NOCOUNT ON;\r\n\t\r\ndeclare\r\n @LToken int=0, @EToken int=0, @LUserId int=0, @EUserId int=0,@NewEToken int=0, @NewLToken int=0,\r\n @ECustCd varchar(10), @LCustCd varchar(10),@EGlobalExcluded bit, @LGlobalExcluded bit\r\n\r\n --==========================================================================================================================\r\n -- Declaration of variables and the table with the returned values from usp_DeleteAssignedLoad SP\r\n declare @DeleteAssignedLoad table (CustCd varchar (10), EquipCreatorUserId int,EToken int\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t,LoadCustCd varchar(10),LoadCreatorUserId int,Token int, DriverID int)\r\n\r\n\r\n--==========================================================================================================================\r\n---- declare two tables to get the records that will be deleted from EquipementPosting and LoadPosting\r\n\r\n declare @EquipmentPostingRecord as table \r\n\t\t(token int, CustCd varchar(10), DateAvail date, SrceID int ,SrceCity varchar(50),SrceSt varchar(2),SrceCountry int,SrceLong float, \r\n\t\t SrceLat float, SrceRadius int,SrceMarketAreaID int, DestID int,DestCity varchar(50),DestSt varchar(2),DestCountry int,DestLong float, DestLat float,\r\n\t\t DestRadius int,DestMarketAreaID int, VehicleSize VARCHAR(64),VehicleType VARCHAR(25),Comment varchar(4096),PostMode char(1),ClientRefNum varchar(256),\r\n \t\t  ProductName varchar(25),PostingAttrib VARCHAR(25),Distance DECIMAL(9,1),CreatedBy int,CreatedOn datetime2(7),DeletedBy int,DeletedOn datetime2(7),\r\n\t\t  VType int, PStatus char(1),NetworkId int,RIType int,Corridor char(1), VSize INT, PAttrib INT, OriginalToken int, CustomerTracking bit, LeadsCount INT)\r\n\r\ndeclare @LoadPostingRecord as table\r\n\t\t(token int, CustCd varchar(10), DateAvail date, SrceID int ,SrceCity varchar(50),SrceSt varchar(2),SrceCountry int,SrceLong float, \r\n\t\t SrceLat float, SrceRadius int,SrceMarketAreaID int, DestID int,DestCity varchar(50),DestSt varchar(2),DestCountry int,DestLong float, DestLat float,\r\n\t\t DestRadius int,DestMarketAreaID int, VehicleSize VARCHAR(64),VehicleType VARCHAR(25),Comment varchar(4096),PostMode char(1),ClientRefNum varchar(256),\r\n \t\t  ProductName varchar(25),PostingAttrib VARCHAR(25),Distance DECIMAL(9,1),CreatedBy int,CreatedOn datetime2(7),DeletedBy int,DeletedOn datetime2(7),\r\n\t\t  VType int, PStatus char(1),NetworkId int,RIType int, VSize INT, PAttrib INT, OriginalToken int, LeadsCount INT)\r\n--==========================================================================================================================\r\n ---- Tables and varibles to check the status and values of executed stored procedure \r\n declare @DeleteEquipmentPosting table (RowsCount int)\r\n declare @DeleteEquipmentPostingCount int\r\n\r\n declare @DeleteLoadPosting table (RowsCount int)\r\n declare @DeleteLoadPostingCount int\r\n\r\n --declare @NewEquipmentToken table (NewEToken int)\r\n --declare @NewLoadToken table (NewLToken int)\r\n--==========================================================================================================================\r\n --- declare the variables needed to execute the procedures to create new postings for both the load and equipement\r\n declare\r\n\t\t@EDateAvail date, @ESrceID int,@ESrceCity varchar(50),@ESrceSt varchar(2),@ESrceLong float, @ESrceLat float, \t@ESrceRadius int,@EDestID int,@EDestCity varchar(50),\r\n\t\t@EDestSt varchar(2),@EDestLong float, @EDestLat float, @EDestRadius int,@EVSize INT,\t@EVType int,@EComment varchar(4096),@EPostMode char(1),\r\n\t\t@EClientRefNum varchar(256),@EProductName varchar(25),@EPAttrib INT,\t@ECreatedBy int,@ENetworkId int,@ECorridor char(1),\t@EOriginalToken int, @ECustomerTracking bit,\r\n\r\n\t\t @LDateAvail date, @LSrceID int, @LSrceCity varchar(50), @LSrceSt varchar(2), @LSrceLong float, @LSrceLat float, @LSrceRadius int, @LDestID int,@LDestCity varchar(50),\r\n\t\t @LDestSt varchar(2), @LDestLong float, @LDestLat float,@LDestRadius int, @LVSize INT, @LVType int,@LComment varchar(4096), @LPostMode char(1),\r\n\t\t @LClientRefNum varchar(256),@LProductName varchar(25), @LPAttrib INT, @LCreatedBy int, @LNetworkId int, @LOriginalToken int\r\n\t\t\r\n--==========================================================================================================================\r\n--- Get all the values for the broker and carrier (UserID, CustCD, token)\r\nif (@Type ='C')\r\n\tBEGIN\t\r\n\t\tset @EToken = @Token; SET @EcustCD = @CustCd; \tSET @EUserId = @UserId\r\n\t\tSELECT @LToken = AL.Token, @LCustCd = Equ.CustCd FROM [dbo].[AssignedLoad] AL \r\n\t\t\tINNER JOIN  [dbo].[EquipmentPosting] Equ\r\n\t\t\t\tON AL.EToken = Equ.Token and Equ.CustCd = @CustCd WHERE AL.EToken=@EToken and AL.DeletedOn is null\r\n\r\n\t\t  SELECT @LCustCd = CustCd, @LUserId = CreatedBy from [dbo].[LoadPosting] WHERE token = @LToken\r\n\t\t\r\n\r\n\t\tEND\r\n\r\nelse if (@Type = 'B')\r\n\tbegin\r\n\t\tset @LToken = @Token; set  @LCustCd = @CustCd; set @LuserId= @UserId\r\n\t\t\r\n\t\tselect @EToken = EToken from [dbo].[AssignedLoad] AL inner join [dbo].[LoadPosting] LP\r\n\t\t\ton AL.Token = LP.Token  and LP.CustCd=@CustCd \twhere AL.Token=@LToken and AL.DeletedOn is null\r\n\t\t\r\n\r\n--- In case the Broker unassigned the load when it assign to broker driver. In this case the equipment token is null in the assigned table.\r\n---- this SP should do nothing in the carrier side\r\n\t\tif( @EToken is not null)\r\n\t\t\tselect @ECustCd = CustCd, @EUserId= CreatedBy from [dbo].[EquipmentPosting] where token = @EToken\r\n\tend\r\n\t\t\t\t\r\n\tif @Ltoken = 0 or @EToken =0\r\n\tbegin\r\n\t\t\tselect @NewEToken as NewEToken , @NewLToken as NewLToken, * from @DeleteAssignedLoad\r\n\t\t\treturn \r\n\t\t\tend\t\r\n\t\r\n\tEND TRY\r\n\t\r\n BEGIN CATCH\r\n  select ERROR_MESSAGE()\r\n\r\n  END CATCH \r\n\t begin transaction TransUnAssign\r\n\t\t begin try\r\n\r\n\t---- delete assignload record then get the records of loadposting and equipementposting then delete the old postings\r\n\t\t\t\r\n\t\tINSERT INTO @DeleteAssignedLoad\r\n\t\t\tEXEC [dbo].[usp_DeleteAssignedLoad] @UserId,@Ltoken\r\n\t\r\n\t\r\n--===================================================================================================================\r\n\r\n\t--- Get the LoadPostingRecord to get all the data required to create a new one\tthen delete the old one\tand repost the new one\t\t\t\t\r\n\t\r\n\t---- execute the SP to get the Load posting\r\n\t\t\t\tinsert into @LoadPostingRecord\r\n\t\t\t\texec [dbo].[usp_GetLoadPosting] @LCustCd, @LToken\r\n\t\r\n\tif exists(select 1 from @LoadPostingRecord)\r\n\t\tbegin\r\n\t---- Get the values of the record and assign them to variables to pass it again to the [usp_CreateLoadPosting] SP\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\tselect top 1 @LDateAvail = DateAvail, @LSrceID = SrceID, @LSrceCity=SrceCity,@LSrceSt= SrceSt,@LSrceLong =SrceLong,@LSrceLat=SrceLat,@LSrceRadius= SrceRadius,\r\n\t\t\t\t\t   @LDestID =DestID,@LDestCity=DestCity,@LDestSt=DestSt,@LDestLong=DestLong, @LDestLat=DestLat,@LDestRadius =DestRadius,\r\n\t\t\t\t\t   @LVSize=VSize,@LVType=VType,@LComment=Comment,@LPostMode=PostMode,@LClientRefNum=ClientRefNum,@LProductName = ProductName,\r\n\t\t\t\t\t   @LPAttrib=PAttrib,@LCreatedBy = CreatedBy,@LNetworkId = NetworkId, @LOriginalToken = OriginalToken\r\n\t\t\t\tfrom @LoadPostingRecord\t\r\n\t\t\t\t\t--from LoadPosting where token=@Ltoken and CustCD = @LCustCD\t\r\n\t----- Delete the Old record (Soft delete)\r\n\t\t\t\t\t\r\n\t\t\t\t\tinsert into @DeleteLoadPosting\r\n\t\t\t\t\t\texec [dbo].[usp_DeleteLoadPosting] @LCustCd,@LUserId, @LToken\r\n\r\n\t----- Check the status of the deleted record if succeed continue otherwise rollback and exit\r\n\t\t\t\t\t\r\n\t\t\t\t\tselect @DeleteLoadPostingCount = RowsCount from @DeleteLoadPosting\r\n\r\n\t\t\t\t\tif @DeleteLoadPostingCount = -1\r\n\t\t\t\t\t\tbegin\r\n\t\t\t\t\t\t\tROLLBACK TRANSACTION TransUnAssign\r\n\t\t\t\t\t\t\treturn\r\n\t\t\t\t\t\tend\r\n\r\n\t\t\t\tif (@Type = 'B')\r\n\t\t\t\tset @LCreatedBy = @UserId\r\n\r\n\t\t---- Create the load again and get the new token\r\n\t\t  --SELECT @LGlobalExcluded = GlobalExcluded FROM Main.dbo.Account WHERE CustCD = @LCustCd\r\n\t\t  exec @LGlobalExcluded = [usp_GetGlobalExcluded] @LCustCd\r\n\r\n\t\t\texec @NewLToken = [dbo].[usp_CreateLoad] @CustCd = @LCustCd, @DateAvail = @LDateAvail, @SrceID= @LSrceID,@SrceCity = @LSrceCity,\r\n\t\t\t     @SrceSt = @LSrceSt,@SrceLong = @LSrceLong, @SrceLat = @LSrceLat , @SrceRadius = @LSrceRadius,@DestID = @LDestID, @DestCity = @LDestCity,\r\n\t\t\t\t @DestSt = @LDestSt, @DestLong = @LDestLong,@DestLat = @LDestLat,@DestRadius = @LDestRadius,@VSize = @LVSize,@VType = @LVType,\r\n\t\t\t\t @Comment  = @LComment, @PostMode = @LPostMode, @ClientRefNum = @LClientRefNum,@ProductName = @LProductName,@PAttrib = @LPAttrib,\r\n\t\t\t\t @CreatedBy = @LCreatedBy, @NetworkId = @LNetworkId, @OriginalToken = @LOriginalToken, @GlobalExcluded = @LGlobalExcluded\r\n\r\n\t\t\t--insert into @NewLoadToken(NewLToken) \r\n\t\t\t--exec [LoadMatching].[dbo].[usp_CreateLoad] @LCustCd, NULL, @LSrceID, @LSrceCity,@LSrceSt,@LSrceLong,\r\n\t\t\t--\t@LSrceLat ,@LSrceRadius,@LDestID,@LDestCity,@LDestSt,@LDestLong,@LDestLat,@LDestRadius,@LVSize,@LVType,\r\n\t\t\t--\t@LComment,@LPostMode,@LClientRefNum,@LProductName,@LPAttrib,@LCreatedBy,@LNetworkId,@LOriginalToken\r\n\t\t\t\r\n\t\t\t--select @NewLToken = NewLToken from @NewLoadToken\r\n\r\n\t\t\tif @NewLToken <=0\r\n\t\t\t\tbegin\r\n\t\t\t\t\tROLLBACK TRANSACTION TransUnAssign\r\n\t\t\t\t\treturn\r\n\t\t\t\tend\r\n\t\tend\r\n\t\t\t\t\t\t\t\t\r\n--===================================================================================================================\r\n--- Get the EquipementPostingRecord to get all the data required to create a new one then delete the old one and repost a new one\r\n\t\t\t\r\n---- execute the SP to get the equipment posting , if the broker unassign the driver\r\n--- In case the Broker unassigned the load when it assign to broker driver. In this case the equipment token is null in the assigned table.\r\n---- this SP should do nothing in the carrier side\r\n\tif( @EToken is not null)\r\n\t\tbegin\r\n\t\t\t\tinsert into @EquipmentPostingRecord \r\n\t\t\t\t\texec [dbo].[usp_GetEquipmentPosting] @EcustCD, @Etoken\r\n\t\t\r\n\t\tif exists(select 1 from @EquipmentPostingRecord)\r\n\t\tbegin\t\t\r\n\t---- Get the values of the record and assign them to variables to pass it again to the [usp_CreateEquipmentPosting] SP\t\t\t\t\r\n\t\t\t\tselect top 1 @EDateAvail = DateAvail, @ESrceID = SrceID, @ESrceCity=SrceCity,@ESrceSt= SrceSt,@ESrceLong =SrceLong,@ESrceLat=SrceLat,@ESrceRadius= SrceRadius,\r\n\t\t\t\t\t   @EDestID =DestID,@EDestCity=DestCity,@EDestSt=DestSt,@EDestLong=DestLong, @EDestLat=DestLat,@EDestRadius =DestRadius,\r\n\t\t\t\t\t   @EVSize=VSize,@EVType=VType,@EComment=Comment,@EPostMode=PostMode,@EClientRefNum=ClientRefNum,@EProductName = ProductName,\r\n\t\t\t\t\t   @EPAttrib=PAttrib,@ECreatedBy = CreatedBy,@ENetworkId = NetworkId,@ECorridor= Corridor, @EOriginalToken = OriginalToken, @ECustomerTracking = CustomerTracking\r\n\t\t\t\tfrom @EquipmentPostingRecord\r\n\t----- Delete the Old record (Soft delete)\r\n\t\t\t\tinsert into @DeleteEquipmentPosting \r\n\t\t\t\t\texec [dbo].[usp_DeleteEquipmentPosting] @ECustCd,@EUserId, @Etoken\r\n\t\r\n\t----- Check the status of the deleted record if succeed continue otherwise rollback and exit\r\n\t\t\t\t\tselect @DeleteEquipmentPostingCount = RowsCount from @DeleteEquipmentPosting\r\n\r\n\t\t\t\t\tif @DeleteEquipmentPostingCount = -1\r\n\t\t\t\t\tbegin\r\n\t\t\t\t\t\t\tROLLBACK TRANSACTION TransUnAssign\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\treturn -- select @NewEToken as NewEToken , @NewLToken as NewLToken, * from @DeleteAssignedLoad\r\n\t\t\t\t\tend\r\n\r\n\t\t\t\tif (@Type ='C')\t\r\n\t\t\t\t\tset @ECreatedBy= @UserId\r\n\t\t\t\t\t\r\n\t\t  exec @EGlobalExcluded = [usp_GetGlobalExcluded] @ECustCd\r\n\r\n\t\t---- Create the equipement again and select the new token\r\n\t\t\t\texec @NewEToken = [dbo].[usp_CreateEquipment] @CustCD = @ECustCd,@DateAvail= @EDateAvail,@SrceID = @ESrceID,@SrceCity = @ESrceCity,@SrceSt = @ESrceSt ,@SrceLong = @ESrceLong,\r\n\t\t\t\t\t @SrceLat = @ESrceLat , @SrceRadius = @ESrceRadius,@DestID = @EDestID,@DestCity = @EDestCity ,@DestSt = @EDestSt,@DestLong = @EDestLong,@DestLat = @EDestLat,@DestRadius = @EDestRadius, @VSize = @EVSize,\r\n\t\t\t\t\t @VType = @EVType,@Comment = @EComment, @PostMode= @EPostMode,@ClientRefNum = @EClientRefNum, @ProductName = @EProductName,@PAttrib = @EPAttrib, @CreatedBy = @ECreatedBy,@NetworkId =@ENetworkId,\r\n\t\t\t\t\t @Corridor = @ECorridor,@OriginalToken = @EOriginalToken, @CustomerTracking = @ECustomerTracking, @GlobalExcluded = @EGlobalExcluded\r\n\t\t\t\r\n\t\t\t\t--insert into @NewEquipmentToken(NewEToken)\r\n\t\t\t\t--\texec [LoadMatching].[dbo].[usp_CreateEquipment] @ECustCd, NULL,@ESrceID,@ESrceCity,@ESrceSt ,@ESrceLong,\r\n\t\t\t\t--\t\t@ESrceLat ,@ESrceRadius,@EDestID,@EDestCity ,@EDestSt,@EDestLong,@EDestLat,@EDestRadius,@EVSize,\r\n\t\t\t\t--\t\t@EVType,@EComment,@EPostMode,@EClientRefNum,@EProductName,@EPAttrib,@ECreatedBy,@ENetworkId,@ECorridor,@EOriginalToken\r\n\t\t\t\t\r\n\t\t\t\t--select @NewEToken = NewEToken from @NewEquipmentToken\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\tif @NewEToken  <= 0\r\n\t\t\t\t\tbegin\r\n\t\t\t\t\t\tROLLBACK TRANSACTION TransUnAssign\r\n\t\t\t\t\t\treturn\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n--===================================================================================================================\r\n\t--- Get the reult output for the deleted record\r\n\t\t\r\n\tselect @NewEToken as NewEToken , @NewLToken as NewLToken, CustCd, EquipCreatorUserId ,EToken \r\n\t\t\t\t\t\t\t,LoadCustCd ,LoadCreatorUserId ,Token,DriverID  from @DeleteAssignedLoad\r\n\t\r\n\r\n--ROLLBACK TRANSACTION TransUnAssign\r\n\r\n\r\nCOMMIT transaction TransUnAssign\r\n\r\n END TRY\r\nBEGIN CATCH\r\n\t\tselect ERROR_NUMBER() AS ErrorNumber,\r\n         ERROR_MESSAGE() AS ErrorMessage\r\n\t\tROLLBACK TRANSACTION TransUnAssign\r\nEND catch","parameters":[{"name":"Token","description":null,"mode":"IN","data_type":"int","custom_fields":{}},{"name":"UserId","description":null,"mode":"IN","data_type":"int","custom_fields":{}},{"name":"CustCd","description":null,"mode":"IN","data_type":"varchar(10)","custom_fields":{}},{"name":"Type","description":null,"mode":"IN","data_type":"char(1)","custom_fields":{}}],"dependencies":null,"imported_at":"2021-07-29 12:59"};