window.repositoryObject = {"parameters_custom_fields":[],"object_id":"f183","name":"udf_GetMileage_old","subtype":"FUNCTION","is_user_defined":false,"description":null,"summary":[{"field":"Documentation","value":{"_type":"link","name":"LoadMatching@UDVLPLL4DATASRV.linklogi.com","id":"d9"}},{"field":"Schema","value":"dbo"},{"field":"Name","value":"udf_GetMileage_old"},{"field":"Type","value":"Function"}],"script":"CREATE FUNCTION [dbo].[udf_GetMileage_old] \r\n(\r\n  @SrceID   INT\r\n ,@DestID   INT\r\n ,@Provider CHAR(1) = NULL --G=Google(Default), P=PCMiler mileage provider\r\n)\r\nRETURNS DECIMAL(9,1)\r\n\r\nAS\r\n-------------------------------------------------------------------------\r\n-- FUNCTION NAME : udf_GetMileage\r\n--------------------------------------------------------------------------\r\n-- DESCRIPTION    : This function returns the driving distance between 2 points. \r\n--                  If distance informaton is not available then return straight line estimate as negitive mile.\r\n--\r\n-- ASSUMPTIONS    : The Mileage table only houses one direction mileage calculation.\r\n--                  We must look for the points with Min-Point to Max-Point \r\n--                  direction.\r\n--                  \r\n--\r\n-- CALLED BY      : \r\n-- EXECUTION FREQUENCY : \r\n-- \r\n-- INPUT PARAMS   : @SrceID: Source Point ID from PCMiler\r\n--                  @DestID: Destination Point ID from PCMiler\r\n--                  @Provider: G=Google(Default) OR P=PCMiler mileage provider\r\n--\r\n-- OUTPUT PARAMS  : None\r\n-- STATUS RETURN  : Returns an driving distance, if distance is not available then return -1\r\n--------------------------------------------------------------------------\r\n-- HISTORY : \r\n-- AUTHOR   DATE        DESCRIPTION\r\n-- Hiro     2018.04.11  Initial Development \r\n-- Hiro     2018.04.18  Added Estimate mileage (for truckshow return the estimate mileage as positive value)\r\n-- Nesrin\t2019.03.08\tChanged the PCMiler Calculation value to @PCMilerMiles /10 as Legacy\r\n-- Vevian\t2020.04.09\tLLSIM-4061: Code optimization after converting memory-optimized tables to Desk-based tables\r\n-------------------------------------------------------------------------\r\n\r\nBEGIN\r\nDECLARE @MinID          INT\r\n      , @MaxID          INT\r\n      , @RetValue       DECIMAL(9,1) = -1\r\n      , @GoogleMiles    DECIMAL(9,1) = NULL\r\n      , @PCMilerMiles   DECIMAL(9,1) = NULL\r\n\r\nDECLARE @iMiles   float = NULL\r\n       ,@SrceLong float = NULL\r\n       ,@SrceLat  float = NULL\r\n       ,@DestLong float = NULL\r\n       ,@DestLat  float = NULL\r\n\r\n   --------------------------------------------------------------\r\n   -- If the points are the same then return 0 miles\r\n   --------------------------------------------------------------\r\n   IF (@SrceID = @DestID)\r\n       SET @RetValue = 0.0 -- Source and Destination are the same\r\n   ELSE\r\n      BEGIN\r\n        --\r\n        IF (@Provider IS NULL OR @Provider <>'P') -- Anything other than P(PCMiler) will be G(Google). \r\n            BEGIN\r\n                SET @Provider = 'P' \r\n            END\r\n        --------------------------------------------------------------\r\n        -- See if we have the mileage already in Mileage table\r\n        --------------------------------------------------------------\r\n        -- Lookup with Srce = min id, Dest = max id\r\n        IF @SrceID <= @DestID\r\n           BEGIN\r\n              SELECT @MinID = @SrceID\r\n              SELECT @MaxID = @DestID \r\n           END\r\n        ELSE\r\n           BEGIN\r\n              SELECT @MinID = @DestID\r\n              SELECT @MaxID = @SrceID          \r\n           END \r\n        \r\n        -- Read Mileage table\r\n        SELECT\t@PCMilerMiles = PCMilerMiles, @GoogleMiles  = GoogleMiles \r\n        FROM\tMileage.dbo.Mileage \r\n        WHERE\tSrceId = @MinID\r\n\t\t\t\tAND DestId = @MaxID\r\n\t\t\t\tAND CalcStatus IS NOT NULL\r\n\r\n        IF (@Provider = 'P' AND @PCMilerMiles IS NOT NULL)\r\n            BEGIN\r\n                SET @RetValue = @PCMilerMiles /10\r\n            END\r\n        ELSE IF (@Provider <> 'P' AND @GoogleMiles IS NOT NULL)\r\n            BEGIN\r\n                SET @RetValue = @GoogleMiles \r\n            END\r\n\r\n        IF (@RetValue = -1) \r\n           BEGIN\r\n              SET @iMiles = 0.0\r\n              --Get long lats for both points if they have not been supplie\r\n              IF (@SrceLong IS NULL) OR (@SrceLat IS NULL)\r\n\t\t\t\tSELECT\t@SrceLong = LONG, @SrceLat  = LAT\r\n\t\t\t\tFROM\tMileage.dbo.Point \r\n        \t    WHERE\tID = @SrceID \r\n                   \r\n              IF (@DestLong IS NULL) OR (@DestLat IS NULL)\r\n\t\t\t\tSELECT\t@DestLong = LONG, @DestLat  = LAT\r\n                FROM\tMileage.dbo.Point \r\n    \t        WHERE\tID = @DestID\r\n    \r\n              IF (@SrceLong IS NOT NULL) AND \r\n                 (@SrceLat  IS NOT NULL) AND \r\n                 (@DestLong IS NOT NULL) AND \r\n                 (@DestLat  IS NOT NULL) \r\n                 BEGIN\r\n                    -- range value between the load Source and load Dest\r\n                    SET @iMiles = dbo.udf_GetDistance( @SrceLat, @SrceLong, @DestLat, @DestLong)\r\n                    --Round to one decimal place\r\n                    SET @RetValue = (Floor(@iMiles * 10))/10\r\n                 END\r\n           END --IF @iMiles NULL\r\n      END\r\n\r\n    RETURN @RetValue\r\nEND","parameters":[{"name":"Returns","description":null,"mode":"OUT","data_type":"decimal(9, 1)","custom_fields":{}},{"name":"SrceID","description":null,"mode":"IN","data_type":"int","custom_fields":{}},{"name":"DestID","description":null,"mode":"IN","data_type":"int","custom_fields":{}},{"name":"Provider","description":null,"mode":"IN","data_type":"char(1)","custom_fields":{}}],"dependencies":null,"imported_at":"2021-07-29 12:59"};